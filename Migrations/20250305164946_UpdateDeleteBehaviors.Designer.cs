// <auto-generated />
using System;
using Demos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Demos.Migrations
{
    [DbContext(typeof(DemosDbContext))]
    [Migration("20250305164946_UpdateDeleteBehaviors")]
    partial class UpdateDeleteBehaviors
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Demos.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverArtUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean");

                    b.Property<int?>("PercentageDone")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoverArtUrl = "https://picsum.photos/seed/album1/500/500",
                            CreatedDate = new DateTime(2023, 5, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 2,
                            Description = "A collection of ambient tracks exploring dreamlike soundscapes",
                            IsComplete = true,
                            PercentageDone = 100,
                            Title = "Ethereal Journeys"
                        },
                        new
                        {
                            Id = 2,
                            CoverArtUrl = "https://picsum.photos/seed/album2/500/500",
                            CreatedDate = new DateTime(2023, 6, 20, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 3,
                            Deadline = new DateTime(2023, 9, 1, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            Description = "A narrative through the sounds of city life",
                            IsComplete = false,
                            PercentageDone = 75,
                            Title = "Urban Chronicles"
                        },
                        new
                        {
                            Id = 3,
                            CoverArtUrl = "https://picsum.photos/seed/album3/500/500",
                            CreatedDate = new DateTime(2023, 4, 10, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 4,
                            Description = "Relaxing tracks inspired by ocean landscapes",
                            IsComplete = true,
                            PercentageDone = 100,
                            Title = "Coastal Memories"
                        },
                        new
                        {
                            Id = 4,
                            CoverArtUrl = "https://picsum.photos/seed/album4/500/500",
                            CreatedDate = new DateTime(2023, 7, 5, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 5,
                            Deadline = new DateTime(2023, 10, 15, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            Description = "Electronic music exploring futuristic themes",
                            IsComplete = false,
                            PercentageDone = 60,
                            Title = "Digital Horizons"
                        });
                });

            modelBuilder.Entity("Demos.Models.AlbumCollaborator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<bool>("CanAddNotes")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanAddTracks")
                        .HasColumnType("boolean");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("AlbumCollaborators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedDate = new DateTime(2023, 5, 16, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            AlbumId = 1,
                            CanAddNotes = true,
                            CanAddTracks = true,
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 2,
                            AddedDate = new DateTime(2023, 5, 18, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            AlbumId = 1,
                            CanAddNotes = true,
                            CanAddTracks = false,
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 3,
                            AddedDate = new DateTime(2023, 6, 22, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            AlbumId = 2,
                            CanAddNotes = true,
                            CanAddTracks = true,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 4,
                            AddedDate = new DateTime(2023, 6, 25, 16, 20, 0, 0, DateTimeKind.Unspecified),
                            AlbumId = 2,
                            CanAddNotes = true,
                            CanAddTracks = true,
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 5,
                            AddedDate = new DateTime(2023, 4, 15, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            AlbumId = 3,
                            CanAddNotes = true,
                            CanAddTracks = false,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 6,
                            AddedDate = new DateTime(2023, 7, 8, 13, 40, 0, 0, DateTimeKind.Unspecified),
                            AlbumId = 4,
                            CanAddNotes = true,
                            CanAddTracks = true,
                            UserProfileId = 3
                        });
                });

            modelBuilder.Entity("Demos.Models.AlbumTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<int>("TrackId")
                        .HasColumnType("integer");

                    b.Property<int?>("TrackOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("TrackId");

                    b.ToTable("AlbumTracks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlbumId = 1,
                            TrackId = 1,
                            TrackOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            AlbumId = 1,
                            TrackId = 3,
                            TrackOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            AlbumId = 2,
                            TrackId = 2,
                            TrackOrder = 1
                        },
                        new
                        {
                            Id = 4,
                            AlbumId = 2,
                            TrackId = 6,
                            TrackOrder = 2
                        },
                        new
                        {
                            Id = 5,
                            AlbumId = 3,
                            TrackId = 4,
                            TrackOrder = 1
                        },
                        new
                        {
                            Id = 6,
                            AlbumId = 3,
                            TrackId = 7,
                            TrackOrder = 2
                        },
                        new
                        {
                            Id = 7,
                            AlbumId = 4,
                            TrackId = 5,
                            TrackOrder = 1
                        },
                        new
                        {
                            Id = 8,
                            AlbumId = 4,
                            TrackId = 8,
                            TrackOrder = 2
                        });
                });

            modelBuilder.Entity("Demos.Models.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Instruments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Six-stringed instrument played by strumming or plucking",
                            Name = "Acoustic Guitar"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Six-stringed amplified instrument with solid body",
                            Name = "Electric Guitar"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Four-stringed instrument that produces low-pitched tones",
                            Name = "Bass Guitar"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "Set of drums and cymbals arranged for convenient playing",
                            Name = "Drum Kit"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Keyboard instrument with hammers that strike strings",
                            Name = "Piano"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Description = "Single-reed woodwind instrument with curved metal body",
                            Name = "Saxophone"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 5,
                            Description = "Electronic instrument that generates audio signals",
                            Name = "Synthesizer"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Description = "Four-stringed instrument played with a bow",
                            Name = "Violin"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            Description = "Brass instrument with three valves and a bright tone",
                            Name = "Trumpet"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            Description = "Digital percussion controller that triggers sampled sounds",
                            Name = "Electronic Drum Pad"
                        });
                });

            modelBuilder.Entity("Demos.Models.InstrumentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InstrumentCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Instruments that produce sound from vibrating strings",
                            Name = "String Instruments"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Instruments that produce sound when struck or shaken",
                            Name = "Percussion"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Wind instruments that use wooden reeds",
                            Name = "Woodwind"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Wind instruments made of brass with a cup or funnel shaped mouthpiece",
                            Name = "Brass"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Instruments that produce sound using electronic circuits",
                            Name = "Electronic"
                        });
                });

            modelBuilder.Entity("Demos.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int?>("TrackId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TrackId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Need to adjust the reverb on the second verse",
                            CreatedDate = new DateTime(2023, 7, 5, 11, 20, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 2,
                            TrackId = 3
                        },
                        new
                        {
                            Id = 2,
                            Content = "Final mix approved by the whole team",
                            CreatedDate = new DateTime(2023, 6, 18, 15, 45, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 3,
                            TrackId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "Working on a new bridge section",
                            CreatedDate = new DateTime(2023, 7, 22, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 4,
                            TrackId = 7
                        },
                        new
                        {
                            Id = 4,
                            Content = "Need to record additional synth layers",
                            CreatedDate = new DateTime(2023, 7, 15, 14, 10, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 5,
                            TrackId = 5
                        },
                        new
                        {
                            Id = 5,
                            AlbumId = 1,
                            Content = "Album ready for distribution",
                            CreatedDate = new DateTime(2023, 6, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 2
                        },
                        new
                        {
                            Id = 6,
                            AlbumId = 2,
                            Content = "Still need to finalize the last two tracks",
                            CreatedDate = new DateTime(2023, 7, 10, 16, 35, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 3
                        },
                        new
                        {
                            Id = 7,
                            AlbumId = 3,
                            Content = "Released on all streaming platforms",
                            CreatedDate = new DateTime(2023, 5, 20, 11, 45, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 4
                        },
                        new
                        {
                            Id = 8,
                            AlbumId = 4,
                            Content = "Working on album artwork options",
                            CreatedDate = new DateTime(2023, 7, 25, 13, 15, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = 5
                        });
                });

            modelBuilder.Entity("Demos.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoverArtUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean");

                    b.Property<int?>("PercentageDone")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AudioUrl = "https://example.com/audio/sunset_dreams.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track1/300/300",
                            CreatorId = 2,
                            IsComplete = true,
                            PercentageDone = 100,
                            Title = "Sunset Dreams",
                            UploadDate = new DateTime(2023, 6, 12, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AudioUrl = "https://example.com/audio/midnight_rain.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track2/300/300",
                            CreatorId = 3,
                            IsComplete = true,
                            PercentageDone = 100,
                            Title = "Midnight Rain",
                            UploadDate = new DateTime(2023, 6, 15, 18, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AudioUrl = "https://example.com/audio/urban_echoes.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track3/300/300",
                            CreatorId = 2,
                            Deadline = new DateTime(2023, 8, 15, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            PercentageDone = 85,
                            Title = "Urban Echoes",
                            UploadDate = new DateTime(2023, 7, 3, 10, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AudioUrl = "https://example.com/audio/ocean_breeze.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track4/300/300",
                            CreatorId = 4,
                            IsComplete = true,
                            PercentageDone = 100,
                            Title = "Ocean Breeze",
                            UploadDate = new DateTime(2023, 5, 28, 14, 20, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AudioUrl = "https://example.com/audio/neon_city.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track5/300/300",
                            CreatorId = 5,
                            Deadline = new DateTime(2023, 8, 30, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            PercentageDone = 70,
                            Title = "Neon City",
                            UploadDate = new DateTime(2023, 7, 10, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AudioUrl = "https://example.com/audio/mountain_high.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track6/300/300",
                            CreatorId = 3,
                            IsComplete = true,
                            PercentageDone = 100,
                            Title = "Mountain High",
                            UploadDate = new DateTime(2023, 4, 15, 9, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            AudioUrl = "https://example.com/audio/desert_wind.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track7/300/300",
                            CreatorId = 4,
                            Deadline = new DateTime(2023, 9, 1, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            PercentageDone = 50,
                            Title = "Desert Wind",
                            UploadDate = new DateTime(2023, 7, 20, 16, 10, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            AudioUrl = "https://example.com/audio/electric_dreams.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track8/300/300",
                            CreatorId = 5,
                            IsComplete = true,
                            PercentageDone = 100,
                            Title = "Electric Dreams",
                            UploadDate = new DateTime(2023, 5, 5, 13, 25, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            AudioUrl = "https://example.com/audio/solo_flight.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track9/300/300",
                            CreatorId = 2,
                            IsComplete = true,
                            PercentageDone = 100,
                            Title = "Solo Flight",
                            UploadDate = new DateTime(2023, 7, 25, 10, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            AudioUrl = "https://example.com/audio/midnight_jazz.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track10/300/300",
                            CreatorId = 3,
                            IsComplete = true,
                            PercentageDone = 100,
                            Title = "Midnight Jazz",
                            UploadDate = new DateTime(2023, 7, 28, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            AudioUrl = "https://example.com/audio/morning_meditation.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track11/300/300",
                            CreatorId = 4,
                            Deadline = new DateTime(2023, 8, 15, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            PercentageDone = 90,
                            Title = "Morning Meditation",
                            UploadDate = new DateTime(2023, 7, 22, 9, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            AudioUrl = "https://example.com/audio/urban_beat.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track12/300/300",
                            CreatorId = 5,
                            IsComplete = true,
                            PercentageDone = 100,
                            Title = "Urban Beat",
                            UploadDate = new DateTime(2023, 7, 15, 16, 20, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            AudioUrl = "https://example.com/audio/rainy_day.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track13/300/300",
                            CreatorId = 2,
                            Deadline = new DateTime(2023, 8, 20, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            PercentageDone = 75,
                            Title = "Rainy Day",
                            UploadDate = new DateTime(2023, 7, 18, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            AudioUrl = "https://example.com/audio/desert_sands.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track14/300/300",
                            CreatorId = 3,
                            IsComplete = true,
                            PercentageDone = 100,
                            Title = "Desert Sands",
                            UploadDate = new DateTime(2023, 7, 10, 13, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            AudioUrl = "https://example.com/audio/acoustic_session.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track15/300/300",
                            CreatorId = 4,
                            IsComplete = true,
                            PercentageDone = 100,
                            Title = "Acoustic Session",
                            UploadDate = new DateTime(2023, 7, 5, 15, 10, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            AudioUrl = "https://example.com/audio/future_nostalgia.mp3",
                            CoverArtUrl = "https://picsum.photos/seed/track16/300/300",
                            CreatorId = 5,
                            Deadline = new DateTime(2023, 9, 1, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            PercentageDone = 60,
                            Title = "Future Nostalgia",
                            UploadDate = new DateTime(2023, 7, 20, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Demos.Models.TrackInstrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InstrumentId")
                        .HasColumnType("integer");

                    b.Property<int>("TrackId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("TrackId");

                    b.ToTable("TrackInstruments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InstrumentId = 1,
                            TrackId = 1
                        },
                        new
                        {
                            Id = 2,
                            InstrumentId = 5,
                            TrackId = 1
                        },
                        new
                        {
                            Id = 3,
                            InstrumentId = 2,
                            TrackId = 2
                        },
                        new
                        {
                            Id = 4,
                            InstrumentId = 4,
                            TrackId = 2
                        },
                        new
                        {
                            Id = 5,
                            InstrumentId = 7,
                            TrackId = 3
                        },
                        new
                        {
                            Id = 6,
                            InstrumentId = 1,
                            TrackId = 4
                        },
                        new
                        {
                            Id = 7,
                            InstrumentId = 8,
                            TrackId = 4
                        },
                        new
                        {
                            Id = 8,
                            InstrumentId = 7,
                            TrackId = 5
                        },
                        new
                        {
                            Id = 9,
                            InstrumentId = 10,
                            TrackId = 5
                        },
                        new
                        {
                            Id = 10,
                            InstrumentId = 6,
                            TrackId = 6
                        },
                        new
                        {
                            Id = 11,
                            InstrumentId = 9,
                            TrackId = 6
                        },
                        new
                        {
                            Id = 12,
                            InstrumentId = 1,
                            TrackId = 7
                        },
                        new
                        {
                            Id = 13,
                            InstrumentId = 7,
                            TrackId = 8
                        },
                        new
                        {
                            Id = 14,
                            InstrumentId = 5,
                            TrackId = 9
                        },
                        new
                        {
                            Id = 15,
                            InstrumentId = 6,
                            TrackId = 10
                        },
                        new
                        {
                            Id = 16,
                            InstrumentId = 3,
                            TrackId = 10
                        },
                        new
                        {
                            Id = 17,
                            InstrumentId = 1,
                            TrackId = 11
                        },
                        new
                        {
                            Id = 18,
                            InstrumentId = 4,
                            TrackId = 12
                        },
                        new
                        {
                            Id = 19,
                            InstrumentId = 7,
                            TrackId = 12
                        },
                        new
                        {
                            Id = 20,
                            InstrumentId = 5,
                            TrackId = 13
                        },
                        new
                        {
                            Id = 21,
                            InstrumentId = 1,
                            TrackId = 14
                        },
                        new
                        {
                            Id = 22,
                            InstrumentId = 1,
                            TrackId = 15
                        },
                        new
                        {
                            Id = 23,
                            InstrumentId = 8,
                            TrackId = 15
                        },
                        new
                        {
                            Id = 24,
                            InstrumentId = 7,
                            TrackId = 16
                        },
                        new
                        {
                            Id = 25,
                            InstrumentId = 10,
                            TrackId = 16
                        });
                });

            modelBuilder.Entity("Demos.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArtist")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "james@example.com",
                            FirstName = "James",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            IsArtist = false,
                            JoinDate = new DateTime(2023, 1, 15, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Wilson",
                            ProfileImage = "https://robohash.org/james.png?size=150x150&set=set4",
                            UserName = "jameswilson"
                        },
                        new
                        {
                            Id = 2,
                            Email = "melinda@example.com",
                            FirstName = "Melinda",
                            IdentityUserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            IsArtist = true,
                            JoinDate = new DateTime(2023, 3, 12, 14, 15, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Jackson",
                            ProfileImage = "https://robohash.org/melinda.png?size=150x150&set=set4",
                            UserName = "melinda_j"
                        },
                        new
                        {
                            Id = 3,
                            Email = "daniel@example.com",
                            FirstName = "Daniel",
                            IdentityUserId = "a7d21fac-3b26-454d-a5c5-5a3ded62b960",
                            IsArtist = true,
                            JoinDate = new DateTime(2023, 2, 24, 11, 45, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Rodriguez",
                            ProfileImage = "https://robohash.org/daniel.png?size=150x150&set=set4",
                            UserName = "danielr"
                        },
                        new
                        {
                            Id = 4,
                            Email = "sara.c@example.com",
                            FirstName = "Sara",
                            IdentityUserId = "c81d7adc-5f52-4b4a-a88c-e8d087d5402f",
                            IsArtist = true,
                            JoinDate = new DateTime(2023, 5, 5, 16, 20, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Chen",
                            ProfileImage = "https://robohash.org/sara.png?size=150x150&set=set4",
                            UserName = "sara_music"
                        },
                        new
                        {
                            Id = 5,
                            Email = "marcus@example.com",
                            FirstName = "Marcus",
                            IdentityUserId = "9b2f41e3-1ba9-4df4-ae95-a0cf2c561b7e",
                            IsArtist = true,
                            JoinDate = new DateTime(2023, 4, 18, 13, 10, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Johnson",
                            ProfileImage = "https://robohash.org/marcus.png?size=150x150&set=set4",
                            UserName = "marcus_j"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8c26c17c-3649-4d48-a01d-65cbd7208758",
                            Name = "Artist",
                            NormalizedName = "ARTIST"
                        },
                        new
                        {
                            Id = "9d592295-0d8e-443b-a80d-9f95d6c0afca",
                            Name = "Listener",
                            NormalizedName = "LISTENER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0f10242-8beb-48aa-8c03-9e5531d513af",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEO7v/LG6Uj2H8+Rt+A4GBk1OeLfHoIdQX5QCb+/P0s0q2/w0SaErlnFBJfZq8D2nLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30f18af5-3228-46c1-9a9e-cf4c77f3cdc1",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51b039b3-e401-46a5-8345-378f9a4aa8c5",
                            Email = "melinda@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKyp93mJ2KxgCMhSXAzJXKckmf/il0RzZcmEC9p83GvANNZJAfRqgUgUYWKY+nl8rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "25fab7ba-75e0-482a-a53f-6c6408eca199",
                            TwoFactorEnabled = false,
                            UserName = "melinda_j"
                        },
                        new
                        {
                            Id = "a7d21fac-3b26-454d-a5c5-5a3ded62b960",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06c1cfdc-5c61-473d-8185-8c0bf29d6052",
                            Email = "daniel@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFV9DQ4XrKboMtfxcZq2Y6onKWXL3MEzIoCQHSIifGSd6y7zPND2WNyKU3tHc1MQkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ad9afa3-8ca2-41c5-beac-16e4087d2d1d",
                            TwoFactorEnabled = false,
                            UserName = "danielr"
                        },
                        new
                        {
                            Id = "c81d7adc-5f52-4b4a-a88c-e8d087d5402f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "042bbc6b-0fd1-449b-8c77-97195caf70e0",
                            Email = "sara.c@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEL7fsQMiChIoMqT4k2rNJaOtfvn9AmGnjNn9/mZNZ6NJJhQ+IJoEdCPsbl6V4UxItw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "295f5d90-c974-44a1-ad6f-846c18e1edaf",
                            TwoFactorEnabled = false,
                            UserName = "sara_music"
                        },
                        new
                        {
                            Id = "9b2f41e3-1ba9-4df4-ae95-a0cf2c561b7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6db17db7-cbf4-49f3-aa1f-9f4c0a866840",
                            Email = "marcus@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFXt/S6+8UzsjKNYZjrx9dH7pincbLDZoDa+FKobNRFckEORrTWiTTuDv0vPSN4Lig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e7f667f-206c-452b-9398-a18f85491f87",
                            TwoFactorEnabled = false,
                            UserName = "marcus_j"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "9d592295-0d8e-443b-a80d-9f95d6c0afca"
                        },
                        new
                        {
                            UserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            RoleId = "8c26c17c-3649-4d48-a01d-65cbd7208758"
                        },
                        new
                        {
                            UserId = "a7d21fac-3b26-454d-a5c5-5a3ded62b960",
                            RoleId = "8c26c17c-3649-4d48-a01d-65cbd7208758"
                        },
                        new
                        {
                            UserId = "c81d7adc-5f52-4b4a-a88c-e8d087d5402f",
                            RoleId = "8c26c17c-3649-4d48-a01d-65cbd7208758"
                        },
                        new
                        {
                            UserId = "9b2f41e3-1ba9-4df4-ae95-a0cf2c561b7e",
                            RoleId = "8c26c17c-3649-4d48-a01d-65cbd7208758"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Demos.Models.Album", b =>
                {
                    b.HasOne("Demos.Models.UserProfile", "Creator")
                        .WithMany("Albums")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Demos.Models.AlbumCollaborator", b =>
                {
                    b.HasOne("Demos.Models.Album", "Album")
                        .WithMany("Collaborators")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demos.Models.UserProfile", "UserProfile")
                        .WithMany("AlbumCollaborations")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Demos.Models.AlbumTrack", b =>
                {
                    b.HasOne("Demos.Models.Album", "Album")
                        .WithMany("AlbumTracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demos.Models.Track", "Track")
                        .WithMany("AlbumTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Demos.Models.Instrument", b =>
                {
                    b.HasOne("Demos.Models.InstrumentCategory", "Category")
                        .WithMany("Instruments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Demos.Models.Note", b =>
                {
                    b.HasOne("Demos.Models.Album", "Album")
                        .WithMany("Notes")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Demos.Models.UserProfile", "Creator")
                        .WithMany("Notes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demos.Models.Track", "Track")
                        .WithMany("Notes")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Album");

                    b.Navigation("Creator");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Demos.Models.Track", b =>
                {
                    b.HasOne("Demos.Models.UserProfile", "Creator")
                        .WithMany("Tracks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Demos.Models.TrackInstrument", b =>
                {
                    b.HasOne("Demos.Models.Instrument", "Instrument")
                        .WithMany("TrackInstruments")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demos.Models.Track", "Track")
                        .WithMany("TrackInstruments")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Demos.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Demos.Models.Album", b =>
                {
                    b.Navigation("AlbumTracks");

                    b.Navigation("Collaborators");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Demos.Models.Instrument", b =>
                {
                    b.Navigation("TrackInstruments");
                });

            modelBuilder.Entity("Demos.Models.InstrumentCategory", b =>
                {
                    b.Navigation("Instruments");
                });

            modelBuilder.Entity("Demos.Models.Track", b =>
                {
                    b.Navigation("AlbumTracks");

                    b.Navigation("Notes");

                    b.Navigation("TrackInstruments");
                });

            modelBuilder.Entity("Demos.Models.UserProfile", b =>
                {
                    b.Navigation("AlbumCollaborations");

                    b.Navigation("Albums");

                    b.Navigation("Notes");

                    b.Navigation("Tracks");
                });
#pragma warning restore 612, 618
        }
    }
}
